<div id="midi-dropzone">
    <div id="flip" class="col-xs-10 col-xs-offset-1 col-sm-4 col-sm-offset-4 col-lg-2 col-lg-offset-5">
        <h1>#MIDIFLIP</h1>
        <p>Web tool for automatically flipping MIDI-files.</p>
        <div id="upload">
            <i class="fa fa-file" aria-hidden="true"></i>
            <h6>Drop a file...</h6>
        </div>
        <button id="browse" type="button"><i class="fa fa-upload" aria-hidden="true"></i> Or browse...</button>
        <button id="flip-button" type="submit">FLIP</button>
    </div>
</div>


<div id="drag-feedback"></div>

@section Scripts {
    <script src="~/Scripts/dropzone.js"></script>
    <script src="~/Scripts/midiconvert.js"></script>
    <script src="~/Scripts/tone.min.js"></script>
    <script>
        var inputFile;

        $("#midi-dropzone").dropzone({
            url: "/home/flip",
            clickable: "#browse",
            autoProcessQueue: false,
            //            previewTemplate: "",
            //            dictDefaultMessage: "",
            init: function() {
                this.on("dragenter", displayDragFeedback);
                this.on("addedfile", onFileAdded)
            }
        });

        var midiDropzone = Dropzone.forElement("#midi-dropzone");

        function displayDragFeedback() {
            $("#drag-feedback").fadeIn("fast");
        }

        $("#flip-button").click(function() {
            var flipRequest = new XMLHttpRequest();
            flipRequest.open("POST", "/home/flip", true);
            flipRequest.responseType = "arraybuffer";

            var formData = new FormData();
            formData.append(inputFile.name, inputFile);

            flipRequest.onload = function() {
                loadMidi(flipRequest.response);
            };

            flipRequest.send(formData);
        });

        function onFileAdded(file) {
            inputFile = file;
        }

        function loadMidi(buffer) {
            var blob = new Blob([buffer]);

            var reader = new FileReader();

            reader.onload = function (e) {
                var flippedMidi = MidiConvert.parse(e.target.result);

                var synth = new Tone.PolySynth(8).toMaster();

                Tone.Transport.bpm.value = flippedMidi.header.bpm;

                for (var track = 0; track < flippedMidi.tracks.length; track++) {
                    var midiPart = new Tone.Part(function (time, note) {
                            synth.triggerAttackRelease(note.name, note.duration, time, note.velocity);
                        },
                        flippedMidi.tracks[track].notes).start();
                }

                Tone.Transport.start();
            }

            reader.readAsBinaryString(blob);
        }
    </script>
}